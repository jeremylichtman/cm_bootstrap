<?php

/**
 * Implements hook_permission().
 */
function cmb_search_event_permission() {
  return array(
    'cmb search events batch' => array(
      'title' => t('Run Batch to Sync Civi Events to CMBS Event Nodes'),
      'description' => t('** Grant to Trusted Admin Users Only **'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cmb_search_event_menu() {
  $items = array();
  $items['admin/cmb-search-events-sync'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmb_search_event_form'),
    'access arguments' => array('cmb search events batch'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['wluisi_test/cmb-search-events'] = array(
    'page callback' => 'cmb_search_event_test',
    'access callback' => TRUE,
    'access arguments' => array('cmb search events batch'),
  );

  return $items;
}

/**
 * Test Route Callback
 */
function cmb_search_event_test() {
  if ($civi_events = cmb_search_event_query_events()) {
    foreach($civi_events as $civi_event) {
      dpm($civi_event);
    }
  }

  return 'cmb_search_event_test()';
}

// ** START: BATCH **

/**
 * Query All Civi Events
 */
function cmb_search_event_query_events() {
  $civi_events = db_query('SELECT id, title, summary, description, start_date, end_date FROM {civicrm_event} WHERE is_public = :is_public',
  array(
    ':is_public' => 1,
  ))->fetchAll();

  return $civi_events;
}

/**
 * Form.
 */
function cmb_search_event_form($form, &$form_state) {
  $form['vfm_message'] = array (
		'#type' => 'item',
		'#markup' => 'Clicking this button will run a batch that syncs Civi Events to CMBS Event nodes',
	);
  $form['cmb_search_eventr'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Form Submit.
 */
function cmb_search_event_form_submit($form, &$form_state) {
  // Get total # of events.
  $civi_events = cmb_search_event_query_events();

  // Get max count
  $max_count = count($civi_events);

  if ($max_count > 0) {
    $form_values = array(
  	  'max' => $max_count,
    );

    $operations[] = array('cmb_search_event_batch_op', array($form_values));

    $batch = array(
      'operations' => $operations,
      'finished' => 'cmb_search_event_batch_finished',
      'title' => t("CMB CiviCRM Event/EventNode Sync"),
      'init_message' => t('Sync CiviCRM Events for Solr Index'),
      'error_message' => t('Error!'),
    );
    batch_set($batch);
  }
  else {
    drupal_set_message(t('No data to process.'));
  }
}

/**
 * Batch operation
 */
function cmb_search_event_batch_op($form_values, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_event'] = 0;
    $context['sandbox']['max'] = $form_values['max'];
  }
  $limit = 50;

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    if ($civi_events = cmb_search_event_query_events()) {
      foreach ($civi_events as $civi_event) {
        // Update Event
        if ($nid = cmb_search_event_node_exists($civi_event->id)) {
          cmb_search_event_update_node($civi_event, $nid);
        }
        // Create Event
        else {
          cmb_search_event_create_node($civi_event);
        }
        // Update batch stuff
        $context['results'][] = $civi_event->id . ' : ' . check_plain($civi_event->id);
        $context['sandbox']['progress']++;
        $context['sandbox']['current_event'] = $civi_event->id;
        $context['message'] = 'Processed ' . $context['sandbox']['progress'] . ' of ' . $context['sandbox']['max'] . ' events.';
      }
    }
  }
  else {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch 'finished' callback
 */
function cmb_search_event_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Data process is complete!'));
    //dpm($results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

// ** END: BATCH **

/**
 * Implements hook_civicrm_post($op, $objectName, $objectId, &$objectRef).
 */
function cmb_search_event_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  if ($objectName == 'Event') {

    switch ($op) {
      case 'create':
        cmb_search_event_create_node($objectRef);
        //dpm($objectRef);
        break;

      case 'edit':
        if ($nid = cmb_search_event_node_exists($objectRef->id)) {
          cmb_search_event_update_node($objectRef, $nid);
        }
        break;

      case 'delete':
        if ($nid = cmb_search_event_node_exists($objectRef->id)) {
          node_delete($nid);
        }
        break;
    }

  }
}

/**
 * Helper function to check if event node already exists
 */
function cmb_search_event_node_exists($event_id) {
  // Check if event node type exists for this user
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', 'cmbs_event')
    ->fieldCondition('field_cmbs_event_civi_id', 'value', $event_id, '=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $nid = array_keys($result['node']);
    $nid = $nid[0];
    return $nid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to update event node
 */
function cmb_search_event_update_node($event, $nid) {
  $node = node_load($nid);
  $node->title = $event->title;

  // Update fields

  // Start Date: Convert datetime to UTC
  if ($event->start_date != 'null') {
    $start_date = cmb_search_event_convert_datetime_to_ut($event->start_date);
    $node->field_cmbs_event_date[LANGUAGE_NONE][0]['value'] = $start_date;
    $node->field_cmbs_event_datetime[LANGUAGE_NONE][0]['value'] = $event->start_date;
  }

  // End Date: Convert datetime to UTC
  if ($event->end_date != 'null') {
    $end_date = cmb_search_event_convert_datetime_to_ut($event->end_date);
    $node->field_cmbs_event_date[LANGUAGE_NONE][0]['value2'] = $end_date;
    $node->field_cmbs_event_datetime[LANGUAGE_NONE][0]['value2'] = $event->end_date;
  }

  // Summary
  if ($event->summary != 'null') {
    $node->field_cmbs_event_summary[LANGUAGE_NONE][0]['value'] = $event->summary;
  }

  // Description
  if ($event->description != 'null') {
    $node->field_cmbs_event_descr[LANGUAGE_NONE][0]['value'] = $event->description;
  }

  node_save($node);
}

/**
 * Helper function to create Event node
 */
function cmb_search_event_create_node($event) {
  $node = new stdClass();
  $node->title = $event->title;
  $node->type = 'cmbs_event';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;

  // Fields
  $node->field_cmbs_event_civi_id[$node->language][]['value'] = $event->id;

  //$test = $event;

  // Start Date: Convert datetime to UTC
  if ($event->start_date != 'null') {
    $start_date = cmb_search_event_convert_datetime_to_ut($event->start_date);
    $node->field_cmbs_event_date[$node->language][0]['value'] = $start_date;
    $node->field_cmbs_event_datetime[$node->language][0]['value'] = $event->start_date;
  }

  // End Date: Convert datetime to UTC
  if ($event->end_date != 'null') {
    $end_date = cmb_search_event_convert_datetime_to_ut($event->end_date);
    $node->field_cmbs_event_date[$node->language][0]['value2'] = $end_date;
    $node->field_cmbs_event_datetime[$node->language][0]['value2'] = $event->end_date;
  }

  // Summary
  if ($event->summary != 'null') {
    $node->field_cmbs_event_summary[$node->language][]['value'] = $event->summary;
  }

  // Description
  if ($event->description != 'null') {
    $node->field_cmbs_event_descr[$node->language][]['value'] = $event->description;
  }

  $node = node_submit($node);
  node_save($node);
}

/**
 * Helper function to convert datetime to unix timestamp
 */
function cmb_search_event_convert_datetime_to_ut($date) {
  $datetime = $date;
  $dt = new DateTime($datetime);
  $dt->setTimezone(new DateTimeZone('UTC'));
  $date_utc = $dt->format('Y-m-d H:i:s');
  $date_ut = strtotime($date_utc);
  return $date_ut;
}
