<?php

/**
 * Implements hook_menu().
 */
function cmb_search_producer_menu() {
  $items = array();

  $items['admin/cmb-search-producer-sync'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cmb_search_producer_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  /*$items['wluisi_test/test1'] = array(
    'page callback' => 'wluisi_test_test_1',
    'access callback' => TRUE,
  );
  */
  return $items;
}

function wluisi_test_test_1() {
  // Get total # of users
  /*$query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'user');
  $query->addTag('rolequery');
  $query->addMetaData('rolename', 'producer');
  $result = $query->execute();

  if (isset($result['user'])) {
    $uids = array_keys($result['user']);
    //dpm($uids);

    $users = entity_load('user', $uids);

    //dpm($users);
    foreach ($users as $user) {
      if ($node = cmb_search_producer_node_exists($user->uid)) {
      }
      else {
        dpm($node);
      }
    }
  }*/

  /*$role = user_role_load_by_name('Producer');
  dpm($role);

  return 'wluisi_test_test_1';*/
}

/**
 * Form.
 */
function cmb_search_producer_form($form, &$form_state) {
  $form['vfm_message'] = array (
		'#type' => 'item',
		'#markup' => 'Clicking this button will run a batch that syncs producer users to producer nodes',
	);
  $form['cmb_search_producer'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Form Submit.
 */
function cmb_search_producer_form_submit($form, &$form_state) {
  // Get total # of users
  $query = new EntityFieldQuery;
    $query->entityCondition('entity_type', 'user');
    $query->addTag('rolequery');
    $query->addMetaData('rolename', 'producer');

  // Get max count
  $max_count = $query->count()->execute();

  if ($max_count > 0) {
    $form_values = array(
  	  'max' => $max_count,
    );

    $operations[] = array('cmb_search_producer_batch_op', array($form_values));

    $batch = array(
      'operations' => $operations,
      'finished' => 'cmb_search_producer_batch_finished',
      'title' => t("CMB Search Producer User/Node Sync"),
      'init_message' => t('Sync Producer Users to Nodes for Solr Index'),
      'error_message' => t('Error!'),
    );
    batch_set($batch);
  }
  else {
    drupal_set_message(t('No data to process.'));
  }
}

/**
 * Batch operation
 */
function cmb_search_producer_batch_op($form_values, &$context) {
  if (empty($context['sandbox'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_user'] = 0;
    $context['sandbox']['max'] = $form_values['max'];
  }
  $limit = 50;

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $query = new EntityFieldQuery;
      $query->entityCondition('entity_type', 'user');
      $query->propertyCondition('uid', $context['sandbox']['current_user'], '>');
      $query->addTag('rolequery');
      $query->addMetaData('rolename', 'producer');
      $query->range(0, $limit);
    $result = $query->execute();

    if (isset($result['user'])) {
      $uids = array_keys($result['user']);
      $users = entity_load('user', $uids);

      foreach ($users as $user) {
        if ($nid = cmb_search_producer_node_exists($user->uid)) {
          // Update node user
          cmb_search_producer_update_node($user, $nid);
        }
        else {
          // Create node user
          cmb_search_producer_create_node($user);
        }

        $context['results'][] = $user->uid . ' : ' . check_plain($user->uid);
        $context['sandbox']['progress']++;
        $context['sandbox']['current_user'] = $user->uid;
        $context['message'] = 'Processed ' . $context['sandbox']['progress'] . ' of ' . $context['sandbox']['max'] . ' users.';
      }
    }
  }
  else {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }

}

/**
 * Batch 'finished' callback
 */
function cmb_search_producer_batch_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Data process is complete!'));
    //dpm($results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(
      t('An error occurred while processing @operation with arguments : @args',
        array(
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        )
      )
    );
  }
}

/**
 * Implements hook_user_insert(&$edit, $account, $category).
 */
function cmb_search_producer_user_insert(&$edit, $account, $category) {
  if (isset($account->uid)) {
    if ($user_object = user_load($account->uid)) {
      if (cmb_search_producer_user_has_role_insert($edit)) {
        cmb_search_producer_create_node($account, $op = 'create');
      }
    }
  }
}

function cmb_search_producer_user_has_role_insert($edit) {
  $role = user_role_load_by_name('Producer');

  if (is_array($edit['roles']) && in_array($role->rid, array_values($edit['roles']))) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Implements hook_user_update(&$edit, $account, $category).
 *
 */
function cmb_search_producer_user_update(&$edit, $account, $category) {
  if (isset($account->uid)) {
    // We reload the user object because we want the role name in the roles array
    $user_object = user_load($account->uid, $reset = TRUE);

    if (cmb_search_producer_user_has_rolename('Producer', $user_object)) {
      if ($nid = cmb_search_producer_node_exists($account->uid)) {
        // Update user
        cmb_search_producer_update_node($account, $nid);
      }
      else {
        // Create user
        cmb_search_producer_create_node($account);
      }
    }
    // Add logic for removing producer role.
  }
}

/**
 * Implements hook_user_delete($account).
 *
 */
function cmb_search_producer_user_delete($account) {
  if ($nid = cmb_search_producer_node_exists($account->uid)) {
    node_delete($nid);
  }
}

/**
 * Helper function to check user has a specific role, by role name.
 */
function cmb_search_producer_user_has_rolename($role_name, $user = NULL) {
  if ($user == NULL) {
    global $user;
  }
  //if (is_array($user->roles) && in_array($role_name, array_values(strtolower($user->roles)))) {
  if (is_array($user->roles) && in_array($role_name, array_values($user->roles))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Helper function to check if producer node already exists
 */
function cmb_search_producer_node_exists($uid) {
  // Check if producer node type exists for this user
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('status', 1)
    ->propertyCondition('type', 'cmbs_producer')
    ->fieldCondition('field_cmbs_producer_uid', 'target_id', $uid, '=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $nid = array_keys($result['node']);
    $nid = $nid[0];
    return $nid;
  }
  else {
    return FALSE;
  }
}

/**
 * Helper function to create producer node
 */
function cmb_search_producer_create_node($user, $op) {
  if ($op == 'create') {
    $title = $user->mail;
  }
  else {
    $title = $user->name;
  }

  $node = new stdClass();
  $node->title = $title;
  $node->type = 'cmbs_producer';
  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = 1;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 0;

  // Fields
  $node->field_cmbs_producer_email[$node->language][]['value'] = $user->mail;
  $node->field_cmbs_producer_phone[$node->language][]['value'] = 'test phone';
  $node->field_cmbs_producer_bio[$node->language][]['value'] = $user->field_user_bio[LANGUAGE_NONE][0]['value'];

  // Entity Ref: User
  $node->field_cmbs_producer_uid[$node->language][] = array(
    'target_id' => $user->uid,
    'target_type' => 'user',
  );

  $node = node_submit($node);
  node_save($node);
}

/**
 * Helper function to update producer node
 */
function cmb_search_producer_update_node($user, $nid) {
  $node = node_load($nid);
  $node->title = $user->name;

  // Update fields
  $node->field_cmbs_producer_email[LANGUAGE_NONE][0]['value'] = $user->mail;
  $node->field_cmbs_producer_phone[LANGUAGE_NONE][0]['value'] = 'test phone';
  $node->field_cmbs_producer_bio[LANGUAGE_NONE][0]['value'] = $user->field_user_bio[LANGUAGE_NONE][0]['value'];

  node_save($node);
}

/**
 * Implement hook_query_TAG_alter
 *
 */
function cmb_search_producer_query_rolequery_alter(QueryAlterableInterface $query) {
  $rolename = $query->getMetaData('rolename');

  $role_subquery = db_select("role", "role");
  $role_subquery->condition('role.name', $rolename, '=');
  $role_subquery->join('users_roles', "users_to_include", "role.rid = users_to_include.rid");
  $role_subquery->fields('users_to_include', array('uid' => 'uid'));
  $role_subquery->where('users_to_include.uid = users.uid');
  $query->exists($role_subquery);
}
