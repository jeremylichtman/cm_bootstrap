<?php

/**
 * Implements hook_permission().
 */
function cm_bootstrap_cp_permission() {
  return array(
    'access control panel' => array(
      'title' => t('Access Control Panel'),
      'description' => t('Access Control Panel. ** Grant to Trusted Admin Users Only **'),
    ),
    'access cc legacy image' => array(
      'title' => t('Access Cloudcast Legacy Image Processor'),
      'description' => t('Access to run Cloudcast Legacy Image Processor ** Grant to Trusted Admin Users Only **'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function cm_bootstrap_cp_menu() {
  $items['cp'] = array(
    'title' => 'Control Panel',
    'description' => 'Control Panel',
    'page callback' => array('cm_bootstrap_cp_landing_pg'),
    'access arguments' => array('access control panel'),
    'type' => MENU_CALLBACK,
  );
  $items['cp/cloudcast-legacy'] = array(
    'title' => 'Control Panel: Cloudcast Legacy Fix',
    'description' => 'Control Panel: Colors',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_bootstrap_cp_legacy_image_form'),
    'access arguments' => array('access cc legacy image'),
    'type' => MENU_CALLBACK,
  );  
  $items['cp/show-buttons'] = array(
    'title' => 'Control Panel: Show Buttons',
    'description' => 'Control Panel: Show Buttons',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cm_bootstrap_cp_show_buttons_form'),
    'access arguments' => array('access control panel'),
    'file' => 'forms/cm_bootstrap_cp.show_buttons.form.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function cm_bootstrap_cp_landing_pg() {
  // Send to TPL  
  return theme('cm_bootstrap_cp_landing_pg', 
    array (
      'content' => '',
    )
  );
}

/**
 * Implements hook_theme().
 */
function cm_bootstrap_cp_theme($existing, $type, $theme, $path) {
	$theme = array();
  $theme['cm_bootstrap_cp_landing_pg'] = array(
		'template' => 'cmb-cp-landing-pg',
		'path' => $path . '/templates',
	);
	return $theme;
}

/**
 * Form constructor
 */
function cm_bootstrap_cp_legacy_image_form($form, &$form_state) {  
  $form['warning'] = array(
    '#markup' => '<b style="color:red;">Clicking this button will generate cloudcast legacy image thumbnails. Heavy processing, let it run until finished. <br /><br />ONLY NEEDS TO BE RUN ONCE. IGNORE ERROR MSGS RETURNED. DO NOT RUN THIS ON A PRODUCTION SITE.</b><br /><br />'
  );
  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => 'Password',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Generate Legacy Image Thumbnails',
  );
  return $form;    
}

/**
 * Form validation
 */
function cm_bootstrap_cp_legacy_image_form_validate($form, &$form_state) {
  if ($form_state['values']['password'] != 'GENERATE') {
    form_set_error('password', t('Incorrect password. Please try again.'));
  }
}

/**
 * Form submit
 */
function cm_bootstrap_cp_legacy_image_form_submit($form, &$form_state) {     
  // Surpress php strict warning errors.
  // In general this is very bad practice, but these error msgs here 
  // are irrelevant to the fix here, which is basically a hack.
  error_reporting(E_ALL ^ E_STRICT);
  
  $fids = db_query("SELECT field_show_vod_fid FROM {field_data_field_show_vod}")->fetchAll();
  if (isset($fids)) {
    foreach($fids as $fid) {
      $file = file_load($fid->field_show_vod_fid);
      $return[] = drupal_render(media_get_thumbnail_preview($file, true));
    }
  }  
  return $return;
  drupal_set_message('Legacy Cloudcast image thumbnails generated!');
}

/**
 * Implements hook_custom_theme().
 * Switch theme based on paths
 */
function cm_bootstrap_cp_custom_theme() {
  // 
  if (arg(0) == 'cp') {
    return 'seven';
  }
}

/**
 * Helper function to get show buttons.
 */
function cm_bootstrap_cp_show_buttons_get() {
  $show_buttons = db_query('SELECT * FROM {cm_bootstrap_cp_show_buttons}')->fetchAll();
  return $show_buttons;
}
