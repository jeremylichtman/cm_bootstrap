<?php

/**
 * Implements hook_theme($existing, $type, $theme, $path).
 */
function cc_content_list_theme($existing, $type, $theme, $path) {
  $theme = array();

  $theme['paragraphs_item__content_list'] = array(
    'template' => 'paragraphs-item--content-list',
    'path' => drupal_get_path('module', 'cc_content_list') . '/templates',
  );

  $theme['paragraphs_item__content_list__paragraphs_editor_preview'] = array(
    'template' => 'paragraphs-item--content-list--paragraphs_editor_preview',
    'path' => drupal_get_path('module', 'cc_content_list') . '/templates',
  );

  return $theme;
}

/**
 * Implements hook_preprocess_entity(&$variables).
 */
function cc_content_list_preprocess_entity(&$variables) {
	if ($variables['entity_type'] == 'paragraphs_item' && $variables['elements']['#bundle'] == 'content_list') {
    $paragraph = $variables['paragraphs_item'];

    // We need an approximate per row count. Default is three items per row.
    $row_count = 3;

    switch($variables['view_mode']) {
    	case 'paragraphs_editor_preview':
    	  $data = array(
          'placeholder' => '/' . drupal_get_path('module', 'cc_content_list') . '/images/cc-content-list-3cols.png',
        );
    	  break;

      case 'full':
        drupal_add_css(drupal_get_path('module', 'cc_content_list') . '/css/cc_content_list.css');

        // Determine how many items there are.
        $row_count = count($paragraph->field_cc_cl_items[LANGUAGE_NONE]);

        // Get content list items
        foreach ($paragraph->field_cc_cl_items[LANGUAGE_NONE] as $item) {
          $p_item_id = $item['value'];
          $p_item_array = entity_load('paragraphs_item', array($p_item_id));

          foreach($p_item_array as $p_item) {
            //dpm($p_item);

            // Image
            $img_src = FALSE;
            if (isset($p_item->field_cc_cl_item_image[LANGUAGE_NONE])) {
              $img_src = image_style_url('cc_content_list_item', $p_item->field_cc_cl_item_image[LANGUAGE_NONE][0]['uri']);
            }

            // Link
            $link = FALSE;
            if (isset($p_item->field_cc_cl_item_link[LANGUAGE_NONE])) {
              $field_cc_cl_item_link_uri = $p_item->field_cc_cl_item_link[LANGUAGE_NONE][0]['url'];
              $http_check = strpos($field_cc_cl_item_link_uri, 'http://');
              $https_check = strpos($field_cc_cl_item_link_uri, 'https://');

              if ($http_check !== false || $https_check !== false) {
                $href = $field_cc_cl_item_link_uri;
                $target = '_blank';
              }
              else {
                $href = '/' . $field_cc_cl_item_link_uri;
                $target = '_self';
              }

              $link = array(
                'href' => $href,
                'target' => $target,
              );
            }

            // Title
            $title = FALSE;
            if (isset($p_item->field_cc_cl_item_title[LANGUAGE_NONE])) {
              $title = $p_item->field_cc_cl_item_title[LANGUAGE_NONE][0]['value'];
            }

            // Abstract
            $abstract = FALSE;
            if (isset($p_item->field_cc_cl_item_abstract[LANGUAGE_NONE])) {
              $abstract = $p_item->field_cc_cl_item_abstract[LANGUAGE_NONE][0]['value'];
            }

            $cl_item[] = array(
              'title' => $title,
              'abstract' => $abstract,
              'img_src' => $img_src,
              'link' => $link,
            );
          }
        }

        $title_display_overlay = FALSE;
        if ($paragraph->field_cc_cl_titles_display[LANGUAGE_NONE][0]['value']) {
          $title_display_overlay = TRUE;
        }

        $meta_display_overlay = 'none';
        if ($paragraph->field_cc_cl_show_metadata[LANGUAGE_NONE][0]['value']) {
          $meta_display_overlay = $paragraph->field_cc_cl_show_metadata[LANGUAGE_NONE][0]['value'];
        }

        $overlay_color = 'transparent';
        if ($paragraph->field_cc_cl_overlay_color[LANGUAGE_NONE][0]['jquery_colorpicker']) {
          $overlay_color = '#' . $paragraph->field_cc_cl_overlay_color[LANGUAGE_NONE][0]['jquery_colorpicker'];
        }

        $overlay_text_color = '#ffffff';
        if ($paragraph->field_cc_cl_overlay_text_color[LANGUAGE_NONE][0]['jquery_colorpicker']) {
          $overlay_text_color = '#' . $paragraph->field_cc_cl_overlay_text_color[LANGUAGE_NONE][0]['jquery_colorpicker'];
        }

        $description = FALSE;
        if (isset($paragraph->field_cc_cl_description[LANGUAGE_NONE])) {
          $description = $paragraph->field_cc_cl_description[LANGUAGE_NONE][0]['value'];
        }

        $overlay_opacity = 0.9;
        if (isset($paragraph->field_cc_cl_overlay_opacity[LANGUAGE_NONE])) {
          $overlay_opacity = $paragraph->field_cc_cl_overlay_opacity[LANGUAGE_NONE][0]['value'];
        }

        $data = array(
          'title' => $paragraph->field_cc_cl_title[LANGUAGE_NONE][0]['value'],
          'description' => $description,
          'cl_items' => $cl_item,
          'title_display_overlay' => $title_display_overlay,
          'meta_display_overlay' => $meta_display_overlay,
          'overlay_color' => hex2rgba($overlay_color, $overlay_opacity),
          'overlay_text_color' => hex2rgba($overlay_text_color, FALSE),
        );
        break;
    }
    
    // Add js for overlay.
    drupal_add_js(drupal_get_path('module', 'cc_content_list') . '/js/cc_content_list.js');

    // Work out which row format to use.
    if ($paragraph->field_columns[LANGUAGE_NONE][0]['value'] &&
      ($paragraph->field_columns[LANGUAGE_NONE][0]['value'] != 'auto')) {
      $row_count = $paragraph->field_columns[LANGUAGE_NONE][0]['value'];
    }
    else {
      if ($row_count % 4 == 0) {
        $row_count = 4;
      }
      else if ($row_count % 3 == 0) {
        $row_count = 3;
      }
      else if ($row_count % 2 == 0) {
        $row_count = 2;
      }
      else {
        // Default.
        $row_count = 3;
      }
    }

    switch($row_count) {
      case 2:
        // 2 across for medium and up / otherwise one per row.
        $variables['row_styles'] = 'col-md-6 col-sm-12';
        break;

      case 3:
        // 3 across for medium and up / otherwise one per row.
        $variables['row_styles'] = 'col-md-4 col-sm-12';
        break;

      case 4:
        // 4 across for large / 2 across for medium / one per row for small.
        $variables['row_styles'] = 'col-lg-3 col-md-6 col-sm-12';
        break;

      default:
        // For any other count, use the default ("3-across" style)
        $variables['row_styles'] = 'col-md-4 col-sm-12';
        break;
    }
    
    $variables['row_count'] = $row_count;

    $variables['content_list'] = $data;
  }
}

/**
 * We have to convert Jquery Colorpicker's HEX output to RGBA to handle opacity.
 * @See: https://mekshq.com/how-to-convert-hexadecimal-color-code-to-rgb-or-rgba-using-php/
 */
function hex2rgba($color, $opacity = FALSE) {
	$default = 'rgb(0,0,0)';

	// Return default if no color provided.
	if(empty($color)) {
    return $default; 
  }

	// Sanitize $color if "#" is provided.
  if ($color[0] == '#' ) {
    $color = substr($color, 1);
  }

  // Check if color has 6 or 3 characters and get values.
  if (strlen($color) == 6) {
    $hex = array(
      $color[0] . $color[1],
      $color[2] . $color[3],
      $color[4] . $color[5],
    );
  } elseif (strlen($color) == 3) {
    $hex = array(
      $color[0] . $color[0],
      $color[1] . $color[1],
      $color[2] . $color[2],
    );
  } else {
    return $default;
  }
 
  // Convert hexadec to rgb.
  $rgb = array_map('hexdec', $hex);

  // Check if opacity is set(rgba or rgb).
  if($opacity){
    if(abs($opacity) > 1) {
      $opacity = 1.0;
    }
    $output = 'rgba(' . implode(",", $rgb) . ',' . $opacity . ')';
  } else {
    $output = 'rgb(' . implode(",", $rgb) . ')';
  }

  // Return rgb(a) color string.
  return $output;
}
